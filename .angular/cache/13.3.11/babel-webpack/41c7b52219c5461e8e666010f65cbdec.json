{"ast":null,"code":"import { Directive, EventEmitter, ElementRef, Input, Output, NgModule } from '@angular/core';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet AlifeFileToBase64Directive = /*#__PURE__*/(() => {\n  class AlifeFileToBase64Directive {\n    /**\r\n     * @param {?} elementRef\r\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.onFileChanged = new EventEmitter();\n      this.fileModelChange = new EventEmitter();\n      this.rawFileModelChange = new EventEmitter();\n      this.isTypeFile = false;\n      this.userCapture = false;\n      this.globalFilesData = [];\n      this.globalRawFilesData = [];\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    ngOnInit() {\n      this.isTypeFile = this.type === 'file';\n      this.init();\n    }\n    /**\r\n     * Initialize the action\r\n     * @return {?}\r\n     */\n\n\n    init() {\n      if (!this.isTypeFile) {\n        console.error(\"alife-file-to-base64 will work only when input type is file.\");\n        this.removeFileChangeAction();\n        return;\n      } // // Check for the various File API support.\n      // if (window.File && window.FileReader && window.FileList && window.Blob) {\n      //   // Great success! All the File APIs are supported.\n      // } else {\n      //   alert('The File APIs are not fully supported in this browser.');\n      // }\n\n\n      this.bindFileChangeAction();\n    }\n    /**\r\n     * Fire the events\r\n     * @return {?}\r\n     */\n\n\n    onFileReadingCompleted() {\n      this.fileModelChange.next(this.globalFilesData);\n      this.rawFileModelChange.next(this.globalRawFilesData);\n      this.onFileChanged.next(this.globalFilesData);\n    }\n    /**\r\n     *\r\n     * Read the files and prepare the output json with base64.\r\n     *\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    handleFileSelection(event) {\n      if (!this.isTypeFile) {\n        return;\n      }\n      /** @type {?} */\n\n\n      let files = event.target.files;\n      this.globalRawFilesData = files;\n      /** @type {?} */\n\n      let fileOutput = [];\n\n      for (let i = 0; i < files.length; i++) {\n        /** @type {?} */\n        let file = files[i];\n        /** @type {?} */\n\n        let opt = {\n          name: file.name,\n          size: file.size,\n          type: file.type\n        };\n        fileOutput.push(opt);\n      }\n      /** @type {?} */\n\n\n      var that = this;\n      /**\r\n       * @return {?}\r\n       */\n\n      function fileReadingCompleted() {\n        that.globalFilesData = fileOutput;\n        that.onFileReadingCompleted();\n      }\n      /** @type {?} */\n\n\n      var reader = new FileReader();\n      /**\r\n       * @param {?} index\r\n       * @return {?}\r\n       */\n\n      function readFile(index) {\n        reader.onload = function (fileData) {\n          /** @type {?} */\n          let base64 = fileData.target.result;\n          fileOutput[index].base64 = base64;\n          readFile(index + 1);\n        };\n\n        if (index >= files.length) {\n          fileReadingCompleted();\n          return;\n        }\n\n        reader.readAsDataURL(files[index]);\n      }\n\n      readFile(0);\n    }\n    /**\r\n     * Add Event listener action on input\r\n     * @return {?}\r\n     */\n\n\n    bindFileChangeAction() {\n      this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\n    }\n    /**\r\n     * Remove Event listener action on input\r\n     * @return {?}\r\n     */\n\n\n    removeFileChangeAction() {\n      this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\n    }\n\n  }\n\n  AlifeFileToBase64Directive.ɵfac = function AlifeFileToBase64Directive_Factory(t) {\n    return new (t || AlifeFileToBase64Directive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  AlifeFileToBase64Directive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AlifeFileToBase64Directive,\n    selectors: [[\"\", \"alife-file-to-base64\", \"\"]],\n    inputs: {\n      type: \"type\",\n      fileModel: \"fileModel\",\n      rawFileModel: \"rawFileModel\"\n    },\n    outputs: {\n      onFileChanged: \"onFileChanged\",\n      fileModelChange: \"fileModelChange\",\n      rawFileModelChange: \"rawFileModelChange\"\n    }\n  });\n  /** @nocollapse */\n\n  return AlifeFileToBase64Directive;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet AlifeFileToBase64Module = /*#__PURE__*/(() => {\n  class AlifeFileToBase64Module {}\n\n  AlifeFileToBase64Module.ɵfac = function AlifeFileToBase64Module_Factory(t) {\n    return new (t || AlifeFileToBase64Module)();\n  };\n\n  AlifeFileToBase64Module.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AlifeFileToBase64Module\n  });\n  AlifeFileToBase64Module.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return AlifeFileToBase64Module;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AlifeFileToBase64Module, {\n    declarations: [AlifeFileToBase64Directive],\n    exports: [AlifeFileToBase64Directive]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { AlifeFileToBase64Module, AlifeFileToBase64Directive as ɵa }; //# sourceMappingURL=alife-file-to-base64.js.map","map":null,"metadata":{},"sourceType":"module"}